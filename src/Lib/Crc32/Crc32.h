//
// Created by WANG Zhenxiang Pharrell on 2019-07-08.
//

#ifndef CRC_CRC32_H
#define CRC_CRC32_H

#include <iostream>
#include <vector>

/*
calculate the CRC-32 hash for the ASCII string 'abc':

inputs:
dividend: binary for 'abc': 0b011000010110001001100011 = 0x616263
polynomial: 0b100000100110000010001110110110111 = 0x104C11DB7

011000010110001001100011

reverse bits in each byte:
100001100100011011000110

 append 32 0 bits:
10000110010001101100011000000000000000000000000000000000

 XOR the first 4 bytes with 0xFFFFFFFF:
01111001101110010011100111111111000000000000000000000000

'CRC division':

 0111 1001  1011 1001  0011 1001  1111 1111  00000000 00000000 00000000

01111001101110010011100111111111000000000000000000000000
 100000100110000010001110110110111
 ---------------------------------
  111000100010010111111010010010110
  100000100110000010001110110110111
  ---------------------------------
   110000001000101011101001001000010
   100000100110000010001110110110111
   ---------------------------------
    100001011101010011001111111101010
    100000100110000010001110110110111
    ---------------------------------
         111101101000100000100101110100000
         100000100110000010001110110110111
         ---------------------------------
          111010011101000101010110000101110
          100000100110000010001110110110111
          ---------------------------------
           110101110110001110110001100110010
           100000100110000010001110110110111
           ---------------------------------
            101010100000011001111110100001010
            100000100110000010001110110110111
            ---------------------------------
              101000011001101111000001011110100
              100000100110000010001110110110111
              ---------------------------------
                100011111110110100111110100001100
                100000100110000010001110110110111
                ---------------------------------
                    110110001101101100000101110110000
                    100000100110000010001110110110111
                    ---------------------------------
                     101101010111011100010110000001110
                     100000100110000010001110110110111
                     ---------------------------------
                       110111000101111001100011011100100
                       100000100110000010001110110110111
                       ---------------------------------
                        10111100011111011101101101010011

remainder: 0b10111100011111011101101101010011 = 0xBC7DDB53

 XOR the remainder with 0xFFFFFFFF:
0b01000011100000100010010010101100 = 0x438224AC

 reverse bits:
0b00110101001001000100000111000010 = 0x352441C2

thus the CRC-32 hash for the ASCII string 'abc' is 0x352441C2

-----------------------------------
Above example taken from ref: https://stackoverflow.com/questions/2587766/how-is-a-crc32-checksum-calculated

Below is my own example:
-----------------------------------

 01100001 01100010 01100011  -- 3 Input bytes

 01100001011000100110001100000000000000000000000000000000
  100000100110000010001110110110111  --- generator polynomial
  ---------------------------------
   100000010100100010010001101101110000000000000000000000
   100000100110000010001110110110111
   ---------------------------------
         110010100000011111011011001000000000000000000000
         100000100110000010001110110110111
         ---------------------------------
          10010000110011101010101111110111000000000000000
          100000100110000010001110110110111
          ---------------------------------
             10010101011100010010100101100100000000000000
             100000100110000010001110110110111
             ---------------------------------
                10111000100011010011110111111100000000000
                100000100110000010001110110110111
                ---------------------------------
                  111010111011011011001100100111100000000
                  100000100110000010001110110110111
                  ---------------------------------
                   11010011101011001000010010001011000000
                   100000100110000010001110110110111
                   ---------------------------------
                    1010001110011000000101001010000100000
                    100000100110000010001110110110111
                    ---------------------------------
                      10000111111000100110100111101010000
                      100000100110000010001110110110111
                      ---------------------------------
                         00101100000101110011100110001100 -- CRC

                         0010 1100 0001 0111 0011 1001 1000 1100 -- CRC grouped by four digits



*/

class Crc32 {
private:
    std::vector<uint8_t> m_inputBytes;

    uint32_t m_len; // len of inputBytes in bytes
    uint32_t m_truncPoly; // the generator
    uint32_t m_width; // len of m_truncPoly in bits
    uint32_t m_table[256]; // the lookup table

    void xInitTable();
public:
    explicit Crc32(uint8_t *arr, uint32_t theLen = 3, uint32_t poly = 0x04C11DB7, uint32_t width = 32);

    ~Crc32();

    /*!
     * Get CRC bitwise, it is very slow thus not suitable fo real world application
     * */
    uint32_t getCRCSlow();

    /*!
     * Get CRC using lookup table, handles the input stream bytewise
     * */
    uint32_t getCRC();

};


#endif //CRC_CRC32_H
